// Generated by .NET Reflector from C:\Projects\Skylines\DifficultyMod\DifficultyMod\libs\Assembly-CSharp.dll
using ColossalFramework;
using ColossalFramework.Globalization;
using ColossalFramework.Math;
using ColossalFramework.Plugins;
//using ColossalFramework.Steamworks;
using ColossalFramework.Threading;
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using UnityEngine;
namespace DifficultyMod
{
    public class WBResidentAI6 : ResidentAI
    {
        private static byte[] commuteHappinness = new byte[1048576];
        private static byte[] commuteWait = new byte[1048576];

        public static byte GetCommute(uint p)
        {
            return commuteHappinness[p];
        }

        private static void AddCommuteWait(uint citizen,int p)
        {
            //Logger.dbgLog("c: "+ citizen.ToString() + " adding " + p.ToString() + " to " + commuteWait[citizen].ToString());
            commuteWait[citizen] = (byte)Mathf.Clamp((int)commuteWait[citizen] + p, 0, 255);
            //if (commuteWait[citizen] >= 8) { Logger.dbgLog("cw>=8"); }
        }

        internal static void AddCommuteWait(Vehicle data, int p)
        {
            //Logger.dbgLog("adding commutewait vech");
            CitizenManager instance = Singleton<CitizenManager>.instance;
            uint num = data.m_citizenUnits;
            int num2 = 0;
            while (num != 0u)
            {
                uint nextUnit = instance.m_units.m_buffer[num].m_nextUnit;
                for (int i = 0; i < 5; i++)
                {
                    uint citizen = instance.m_units.m_buffer[num].GetCitizen(i);
                    if (citizen != 0u)
                    {
                        AddCommuteWait(citizen,p);
                    }
                }
                num = nextUnit;
                if (++num2 > 524288)
                {
                    CODebugBase<LogChannel>.Error(LogChannel.Core, "Invalid list detected!\n" + Environment.StackTrace);
                    break;
                }
            }

        }

        private void ReleaseCitizen(uint citizenID)
        {
            commuteHappinness[citizenID] = 0;
            //
            //KH addition 2/19/16
            commuteWait[citizenID] = 0;
            //
            Singleton<CitizenManager>.instance.ReleaseCitizen(citizenID);
        }

        protected override void ArriveAtDestination(ushort instanceID, ref CitizenInstance citizenData, bool success)
        {
            uint citizen = citizenData.m_citizen;
            if (citizen != 0)
            {
                CitizenManager instance = Singleton<CitizenManager>.instance;
                if (success)
                {
                    instance.m_citizens.m_buffer[citizen].SetLocationByBuilding(citizen, citizenData.m_targetBuilding);
                    if (citizenData.m_sourceBuilding != 0 && instance.m_citizens.m_buffer[citizen].CurrentLocation == Citizen.Location.Work)
                    {
                        ReachedDestination(citizen, citizenData);
                    }
                    else if (citizenData.m_sourceBuilding != 0 && instance.m_citizens.m_buffer[citizen].CurrentLocation == Citizen.Location.Visit)
                    {
                        ReachedDestination(citizen, citizenData);                        
                    }
                }
            }

            base.ArriveAtDestination(instanceID, ref citizenData, success);
        }

        protected void ReachedDestination(uint citizen, CitizenInstance citizenData)
        {
            BuildingManager manager2 = Singleton<BuildingManager>.instance;
            BuildingInfo info = manager2.m_buildings.m_buffer[citizenData.m_sourceBuilding].Info;
            int amountDelta = 50;
            info.m_buildingAI.ModifyMaterialBuffer(citizenData.m_sourceBuilding, ref manager2.m_buildings.m_buffer[citizenData.m_sourceBuilding], TransferManager.TransferReason.Worker0, ref amountDelta);
            //Logger.dbgLog(citizen.ToString() + "  chappy was:" + commuteHappinness[citizen].ToString() + " *3.0 + cwait:"+ commuteWait[citizen].ToString() + " // 4  will be: " + (((int)commuteHappinness[citizen] * 3.0 + (int)commuteWait[citizen]) / 4.0).ToString());
            commuteHappinness[citizen] = (byte)Mathf.Clamp((int)( ( (int)commuteHappinness[citizen] * 3.0 + (int)commuteWait[citizen]) / 4.0), 0, 255);
            commuteWait[citizen] = 0;
//            if (commuteHappinness[citizen] > 0)
//            { 
//                Logger.dbgLog(citizen.ToString() + "  chappy now:" + commuteHappinness[citizen].ToString() + "cwait:" + commuteWait[citizen].ToString()); 
//            }
        }

        protected void StartJourney(uint citizen, Citizen data)
        {
            BuildingManager instance = Singleton<BuildingManager>.instance;
            BuildingInfo homeInfo = instance.m_buildings.m_buffer[data.m_homeBuilding].Info;
            int amountDelta = -50;
            instance.m_buildings.m_buffer[data.m_homeBuilding].Info.m_buildingAI.ModifyMaterialBuffer(data.m_homeBuilding, ref instance.m_buildings.m_buffer[data.m_homeBuilding], TransferManager.TransferReason.Worker0, ref amountDelta);
            commuteWait[citizen] = 1;
        }

        public override void SimulationStep(uint citizenID, ref Citizen data)
        {
            if (data.Dead || !this.UpdateAge(citizenID, ref data))
            {
                if (!data.Dead)
                {
                    this.UpdateHome(citizenID, ref data);
                }
                if (!data.Sick && !data.Dead)
                {
                    if (this.UpdateHealth(citizenID, ref data))
                    {
                        return;
                    }
                    this.UpdateWellbeing(citizenID, ref data);
                    this.UpdateWorkplace(citizenID, ref data);
                }
                this.UpdateLocation(citizenID, ref data);
            }
        }


        public override void SimulationStep(ushort instanceID, ref CitizenInstance citizenData, ref CitizenInstance.Frame frameData, bool lodPhysics)
        {
            base.SimulationStep(instanceID, ref citizenData, ref frameData, lodPhysics);

            if ((citizenData.m_flags & CitizenInstance.Flags.WaitingTransport) != CitizenInstance.Flags.None && citizenData.m_waitCounter > 0)
            {
                if (Singleton<SimulationManager>.instance.m_randomizer.Int32(3) == 0)
                {
                    citizenData.m_waitCounter = (byte)(citizenData.m_waitCounter - 1);
                }
                else
                {
                    AddCommuteWait(citizenData.m_citizen, 1);    
                }
            }
        }

        private bool FindHospital(uint citizenID, ushort sourceBuilding, TransferManager.TransferReason reason)
        {
            if (reason == TransferManager.TransferReason.Dead)
            {
                if (Singleton<UnlockManager>.instance.Unlocked(UnlockManager.Feature.DeathCare))
                {
                    return true;
                }
               ReleaseCitizen(citizenID);
                return false;
            }
            if (Singleton<UnlockManager>.instance.Unlocked(ItemClass.Service.HealthCare))
            {
                TransferManager.TransferOffer offer = new TransferManager.TransferOffer
                {
                    Priority = 6,
                    Citizen = citizenID,
                    Position = Singleton<BuildingManager>.instance.m_buildings.m_buffer[sourceBuilding].m_position,
                    Amount = 1,
                    Active = Singleton<SimulationManager>.instance.m_randomizer.Int32(2) == 0
                };
                Singleton<TransferManager>.instance.AddOutgoingOffer(reason, offer);
                return true;
            }
           ReleaseCitizen(citizenID);
            return false;
        }

        private void FinishSchoolOrWork(uint citizenID, ref Citizen data)
        {
            if (data.m_workBuilding != 0)
            {
                if ((data.CurrentLocation == Citizen.Location.Work) && (data.m_homeBuilding != 0))
                {
                    base.StartMoving(citizenID, ref data, data.m_workBuilding, data.m_homeBuilding);
                }
                BuildingManager instance = Singleton<BuildingManager>.instance;
                CitizenManager manager2 = Singleton<CitizenManager>.instance;
                uint citizenUnits = instance.m_buildings.m_buffer[data.m_workBuilding].m_citizenUnits;
                int num2 = 0;
                while (citizenUnits != 0)
                {
                    uint nextUnit = manager2.m_units.m_buffer[citizenUnits].m_nextUnit;
                    CitizenUnit.Flags flags = manager2.m_units.m_buffer[citizenUnits].m_flags;
                    if (((ushort)(flags & (CitizenUnit.Flags.None | CitizenUnit.Flags.Student | CitizenUnit.Flags.Work))) != 0)
                    {
                        if (((ushort)(flags & (CitizenUnit.Flags.None | CitizenUnit.Flags.Student))) != 0)
                        {
                            if (data.RemoveFromUnit(citizenID, ref manager2.m_units.m_buffer[citizenUnits]))
                            {
                                BuildingInfo info = instance.m_buildings.m_buffer[data.m_workBuilding].Info;
                                if (info.m_buildingAI.GetEducationLevel1())
                                {
                                    data.Education1 = true;
                                }
                                if (info.m_buildingAI.GetEducationLevel2())
                                {
                                    data.Education2 = true;
                                }
                                if (info.m_buildingAI.GetEducationLevel3())
                                {
                                    data.Education3 = true;
                                }
                                data.m_workBuilding = 0;
                                data.m_flags &= ~Citizen.Flags.Student;
                                
                                return;
                            }
                        }
                        else if (data.RemoveFromUnit(citizenID, ref manager2.m_units.m_buffer[citizenUnits]))
                        {
                            data.m_workBuilding = 0;
                            data.m_flags &= ~Citizen.Flags.Student;
                            return;
                        }
                    }
                    citizenUnits = nextUnit;
                    if (++num2 > 524288)
                    {
                        CODebugBase<LogChannel>.Error(LogChannel.Core, "Invalid list detected!\n" + System.Environment.StackTrace);
                        break;
                    }
                }
            }
        }

        private bool UpdateAge(uint citizenID, ref Citizen data)
        {
            int num = data.Age + 1;
            if (num <= 45)
            {
                switch (num)
                {
                    case 15:
                    case 45:
                        this.FinishSchoolOrWork(citizenID, ref data);
                        break;
                }
            }
            else
            {
                switch (num)
                {
                    case 90:
                    case 180:
                        this.FinishSchoolOrWork(citizenID, ref data);
                        goto Label_006D;
                }
                if (((data.m_flags & Citizen.Flags.Student) != Citizen.Flags.None) && ((num % 15) == 0))
                {
                    this.FinishSchoolOrWork(citizenID, ref data);
                }
            }
        Label_006D:
            if ((data.m_flags & Citizen.Flags.Original) != Citizen.Flags.None)
            {
                CitizenManager instance = Singleton<CitizenManager>.instance;
                if (instance.m_tempOldestOriginalResident < num)
                {
                    instance.m_tempOldestOriginalResident = num;
                }
                if (num == 240)
                {
                    Singleton<StatisticsManager>.instance.Acquire<StatisticInt32>(StatisticType.FullLifespans).Add(1);
                }
            }
            data.Age = num;
            if (((num >= 240) && (data.CurrentLocation != Citizen.Location.Moving)) && ((data.m_vehicle == 0) && (Singleton<SimulationManager>.instance.m_randomizer.Int32(240, 450) <= num)))
            {
                this.Die(citizenID, ref data);
                if (Singleton<SimulationManager>.instance.m_randomizer.Int32(2) == 0)
                {
                   ReleaseCitizen(citizenID);
                    return true;
                }
            }
            return false;
        }

        private bool UpdateHealth(uint citizenID, ref Citizen data)
        {
            if (data.m_homeBuilding != 0)
            {
                int num3;
                int num4;
                int num6;
                int num7;
                int num8;
                int num9;
                bool flag;
                bool flag2;
                byte num10;
                byte num13;
                int num = 20;
                BuildingManager instance = Singleton<BuildingManager>.instance;
                BuildingInfo info = instance.m_buildings.m_buffer[data.m_homeBuilding].Info;
                Vector3 position = instance.m_buildings.m_buffer[data.m_homeBuilding].m_position;
                DistrictManager manager2 = Singleton<DistrictManager>.instance;
                byte district = manager2.GetDistrict(position);
                if ((manager2.m_districts.m_buffer[district].m_servicePolicies & DistrictPolicies.Services.SmokingBan) != DistrictPolicies.Services.None)
                {
                    num += 10;
                }
                info.m_buildingAI.GetMaterialAmount(data.m_homeBuilding, ref instance.m_buildings.m_buffer[data.m_homeBuilding], TransferManager.TransferReason.Garbage, out num3, out num4);
                num3 /= 1000;
                if (num3 <= 2)
                {
                    num += 12;
                }
                else if (num3 >= 4)
                {
                    num -= num3 - 3;
                }
                int healthCareRequirement = Citizen.GetHealthCareRequirement(Citizen.GetAgePhase(data.EducationLevel, data.Age));
                Singleton<ImmaterialResourceManager>.instance.CheckResource(ImmaterialResourceManager.Resource.HealthCare, position, out num6, out num7);
                if (healthCareRequirement != 0)
                {
                    if (num6 != 0)
                    {
                        num += ImmaterialResourceManager.CalculateResourceEffect(num6, healthCareRequirement, 500, 20, 40);
                    }
                    if (num7 != 0)
                    {
                        num += ImmaterialResourceManager.CalculateResourceEffect(num7, healthCareRequirement >> 1, 250, 5, 20);
                    }
                }
                Singleton<ImmaterialResourceManager>.instance.CheckLocalResource(ImmaterialResourceManager.Resource.NoisePollution, position, out num8);
                if (num8 != 0)
                {
                    num -= (num8 * 100) / 255;
                }
                Singleton<ImmaterialResourceManager>.instance.CheckLocalResource(ImmaterialResourceManager.Resource.CrimeRate, position, out num9);
                if (num9 > 3)
                {
                    if (num9 <= 30)
                    {
                        num -= 2;
                    }
                    else if (num9 <= 70)
                    {
                        num -= 5;
                    }
                    else
                    {
                        num -= 15;
                    }
                }
                Singleton<WaterManager>.instance.CheckWater(position, out flag, out flag2, out num10);
                if (flag)
                {
                    num += 12;
                    data.NoWater = 0;
                }
                else
                {
                    int noWater = data.NoWater;
                    if (noWater < 2)
                    {
                        data.NoWater = noWater + 1;
                    }
                    else
                    {
                        num -= 5;
                    }
                }
                if (flag2)
                {
                    num += 12;
                    data.NoSewage = 0;
                }
                else
                {
                    int noSewage = data.NoSewage;
                    if (noSewage < 2)
                    {
                        data.NoSewage = noSewage + 1;
                    }
                    else
                    {
                        num -= 5;
                    }
                }
                if (num10 < 35)
                {
                    num -= num10;
                }
                else
                {
                    num -= (num10 * 2) - 35;
                }
                Singleton<NaturalResourceManager>.instance.CheckPollution(position, out num13);
                num -= (num13 * 100) / 255;
                num = Mathf.Clamp(num, 0, 100);
                data.m_health = (byte)num;
                int num14 = 0;
                if (num <= 10)
                {
                    int badHealth = data.BadHealth;
                    if (badHealth < 3)
                    {
                        num14 = 15;
                        data.BadHealth = badHealth + 1;
                    }
                    else if (num7 == 0)
                    {
                        num14 = 75;
                    }
                    else
                    {
                        num14 = 50;
                    }
                }
                else if (num <= 25)
                {
                    data.BadHealth = 0;
                    num14 += 10;
                }
                else if (num <= 50)
                {
                    data.BadHealth = 0;
                    num14 += 3;
                }
                else
                {
                    data.BadHealth = 0;
                }
                if (((data.CurrentLocation != Citizen.Location.Moving) && (data.m_vehicle == 0)) && ((num14 != 0) && (Singleton<SimulationManager>.instance.m_randomizer.Int32(100) < num14)))
                {
                    if (Singleton<SimulationManager>.instance.m_randomizer.Int32(3) == 0)
                    {
                        this.Die(citizenID, ref data);
                        if (Singleton<SimulationManager>.instance.m_randomizer.Int32(2) == 0)
                        {
                           ReleaseCitizen(citizenID);
                            return true;
                        }
                    }
                    else
                    {
                        data.Sick = true;
                    }
                }
            }
            return false;
        }

        private void UpdateHome(uint citizenID, ref Citizen data)
        {
            if ((data.m_homeBuilding == 0) && ((data.m_flags & Citizen.Flags.DummyTraffic) == Citizen.Flags.None))
            {
                TransferManager.TransferOffer offer = new TransferManager.TransferOffer
                {
                    Priority = 7,
                    Citizen = citizenID,
                    Amount = 1,
                    Active = true
                };
                if (data.m_workBuilding != 0)
                {
                    BuildingManager instance = Singleton<BuildingManager>.instance;
                    offer.Position = instance.m_buildings.m_buffer[data.m_workBuilding].m_position;
                }
                else
                {
                    offer.PositionX = Singleton<SimulationManager>.instance.m_randomizer.Int32(0x100);
                    offer.PositionZ = Singleton<SimulationManager>.instance.m_randomizer.Int32(0x100);
                }
                if (Singleton<SimulationManager>.instance.m_randomizer.Int32(2) == 0)
                {
                    switch (data.EducationLevel)
                    {
                        case Citizen.Education.Uneducated:
                            Singleton<TransferManager>.instance.AddOutgoingOffer(TransferManager.TransferReason.Single0, offer);
                            break;

                        case Citizen.Education.OneSchool:
                            Singleton<TransferManager>.instance.AddOutgoingOffer(TransferManager.TransferReason.Single1, offer);
                            break;

                        case Citizen.Education.TwoSchools:
                            Singleton<TransferManager>.instance.AddOutgoingOffer(TransferManager.TransferReason.Single2, offer);
                            break;

                        case Citizen.Education.ThreeSchools:
                            Singleton<TransferManager>.instance.AddOutgoingOffer(TransferManager.TransferReason.Single3, offer);
                            break;
                    }
                }
                else
                {
                    switch (data.EducationLevel)
                    {
                        case Citizen.Education.Uneducated:
                            Singleton<TransferManager>.instance.AddOutgoingOffer(TransferManager.TransferReason.Single0B, offer);
                            break;

                        case Citizen.Education.OneSchool:
                            Singleton<TransferManager>.instance.AddOutgoingOffer(TransferManager.TransferReason.Single1B, offer);
                            break;

                        case Citizen.Education.TwoSchools:
                            Singleton<TransferManager>.instance.AddOutgoingOffer(TransferManager.TransferReason.Single2B, offer);
                            break;

                        case Citizen.Education.ThreeSchools:
                            Singleton<TransferManager>.instance.AddOutgoingOffer(TransferManager.TransferReason.Single3B, offer);
                            break;
                    }
                }
            }
        }

        private void UpdateLocation(uint citizenID, ref Citizen data)
        {
            if ((((data.m_homeBuilding == 0) && (data.m_workBuilding == 0)) && ((data.m_visitBuilding == 0) && (data.m_instance == 0))) && (data.m_vehicle == 0))
            {
               ReleaseCitizen(citizenID);
            }
            else
            {
                switch (data.CurrentLocation)
                {
                    case Citizen.Location.Home:
                        if ((data.m_flags & Citizen.Flags.MovingIn) == Citizen.Flags.None)
                        {
                            if (data.Dead)
                            {
                                if (data.m_homeBuilding == 0)
                                {
                                   ReleaseCitizen(citizenID);
                                    return;
                                }
                                if (data.m_workBuilding != 0)
                                {
                                    data.SetWorkplace(citizenID, 0, 0);
                                }
                                if (data.m_visitBuilding != 0)
                                {
                                    data.SetVisitplace(citizenID, 0, 0);
                                }
                                if ((data.m_vehicle == 0) && !this.FindHospital(citizenID, data.m_homeBuilding, TransferManager.TransferReason.Dead))
                                {
                                    return;
                                }
                            }
                            else if (data.Sick)
                            {
                                if (((data.m_homeBuilding != 0) && (data.m_vehicle == 0)) && !this.FindHospital(citizenID, data.m_homeBuilding, TransferManager.TransferReason.Sick))
                                {
                                    return;
                                }
                            }
                            else if ((data.m_flags & Citizen.Flags.NeedGoods) != Citizen.Flags.None)
                            {
                                if (((data.m_homeBuilding != 0) && (data.m_instance == 0)) && (data.m_vehicle == 0))
                                {
                                    base.FindVisitPlace(citizenID, data.m_homeBuilding, this.GetShoppingReason());
                                }
                            }
                            else if (data.m_workBuilding != 0)
                            {

                                BuildingManager instance = Singleton<BuildingManager>.instance;
                                BuildingInfo info = instance.m_buildings.m_buffer[data.m_workBuilding].Info;

                                int num = Singleton<SimulationManager>.instance.m_randomizer.Int32(80);
                                if (num == 0)
                                {
                                    if ((data.m_instance == 0) && (data.m_vehicle == 0))
                                    {
                                        base.FindVisitPlace(citizenID, data.m_workBuilding, this.GetEntertainmentReason());
                                    }
                                }
                                else
                                {
                                    var numChance = 24;
                                    if (info.m_class.m_service == ItemClass.Service.Office)
                                    {
                                        numChance = 80;
                                    }
                                    if ((((num < numChance) && (data.m_homeBuilding != 0)) && (data.m_instance == 0)) && (data.m_vehicle == 0))
                                    {
                                        if (base.StartMoving(citizenID, ref data, data.m_homeBuilding, data.m_workBuilding))
                                        {
                                            StartJourney(citizenID, data);
                                            
                                        }
                                    }
                                }
                            }
                            break;
                        }
                       ReleaseCitizen(citizenID);
                        return;

                    case Citizen.Location.Work:
                        if (!data.Dead)
                        {
                            if (data.Sick)
                            {
                                if (data.m_workBuilding != 0)
                                {
                                    if ((data.m_vehicle == 0) && !this.FindHospital(citizenID, data.m_workBuilding, TransferManager.TransferReason.Sick))
                                    {
                                        return;
                                    }
                                }
                                else
                                {
                                    data.CurrentLocation = Citizen.Location.Home;
                                }
                            }
                            else if ((data.m_flags & Citizen.Flags.NeedGoods) != Citizen.Flags.None)
                            {
                                if (data.m_workBuilding == 0)
                                {
                                    data.CurrentLocation = Citizen.Location.Home;
                                }
                                else if ((data.m_instance == 0) && (data.m_vehicle == 0))
                                {
                                    base.FindVisitPlace(citizenID, data.m_workBuilding, this.GetShoppingReason());
                                }
                            }
                            else if (data.m_workBuilding == 0)
                            {
                                data.CurrentLocation = Citizen.Location.Home;
                            }
                            else if (data.m_homeBuilding != 0)
                            {
                                int num2 = Singleton<SimulationManager>.instance.m_randomizer.Int32(80);
                                if (num2 == 0)
                                {
                                    if ((data.m_instance == 0) && (data.m_vehicle == 0))
                                    {
                                        base.FindVisitPlace(citizenID, data.m_workBuilding, this.GetEntertainmentReason());
                                    }
                                }
                                else {
                                    BuildingManager instance = Singleton<BuildingManager>.instance;
                                    BuildingInfo info = instance.m_buildings.m_buffer[data.m_workBuilding].Info;
                                    var numChance = 24;
                                    if (info.m_class.m_service == ItemClass.Service.Office)
                                    {
                                        numChance = 80;
                                    }
                                    if ((num2 < numChance) &&  ((data.m_instance == 0) && (data.m_vehicle == 0)))
                                    {
                                        base.StartMoving(citizenID, ref data, data.m_workBuilding, data.m_homeBuilding);
                                    }
                                }
                            }
                            break;
                        }
                        if (data.m_workBuilding != 0)
                        {
                            if (data.m_homeBuilding != 0)
                            {
                                data.SetHome(citizenID, 0, 0);
                            }
                            if (data.m_visitBuilding != 0)
                            {
                                data.SetVisitplace(citizenID, 0, 0);
                            }
                            if ((data.m_vehicle != 0) || this.FindHospital(citizenID, data.m_workBuilding, TransferManager.TransferReason.Dead))
                            {
                                break;
                            }
                            return;
                        }
                       ReleaseCitizen(citizenID);
                        return;

                    case Citizen.Location.Visit:
                        if (!data.Dead)
                        {
                            if (data.Sick)
                            {
                                if (data.m_visitBuilding != 0)
                                {
                                    if (((data.m_vehicle == 0) && (Singleton<BuildingManager>.instance.m_buildings.m_buffer[data.m_visitBuilding].Info.m_class.m_service != ItemClass.Service.HealthCare)) && !this.FindHospital(citizenID, data.m_visitBuilding, TransferManager.TransferReason.Sick))
                                    {
                                        return;
                                    }
                                }
                                else
                                {
                                    data.CurrentLocation = Citizen.Location.Home;
                                }
                            }
                            else if ((data.m_flags & Citizen.Flags.NeedGoods) != Citizen.Flags.None)
                            {
                                if (data.m_visitBuilding == 0)
                                {
                                    data.CurrentLocation = Citizen.Location.Home;
                                }
                                else
                                {
                                    BuildingManager instance = Singleton<BuildingManager>.instance;
                                    BuildingInfo info = instance.m_buildings.m_buffer[data.m_visitBuilding].Info;
                                    int amountDelta = -100;
                                    info.m_buildingAI.ModifyMaterialBuffer(data.m_visitBuilding, ref instance.m_buildings.m_buffer[data.m_visitBuilding], TransferManager.TransferReason.Shopping, ref amountDelta);
                                }
                            }
                            else if (data.m_visitBuilding == 0)
                            {
                                data.CurrentLocation = Citizen.Location.Home;
                            }
                            else if (Singleton<SimulationManager>.instance.m_randomizer.Int32(40) < 10 && data.m_homeBuilding != 0 && data.m_instance == 0 && data.m_vehicle == 0)
                            {
                                base.StartMoving(citizenID, ref data, data.m_visitBuilding, data.m_homeBuilding);
                                data.SetVisitplace(citizenID, 0, 0);
                            }
                            break;
                        }
                        if (data.m_visitBuilding != 0)
                        {
                            if (data.m_homeBuilding != 0)
                            {
                                data.SetHome(citizenID, 0, 0);
                            }
                            if (data.m_workBuilding != 0)
                            {
                                data.SetWorkplace(citizenID, 0, 0);
                            }
                            if (((data.m_vehicle != 0) || (Singleton<BuildingManager>.instance.m_buildings.m_buffer[data.m_visitBuilding].Info.m_class.m_service == ItemClass.Service.HealthCare)) || this.FindHospital(citizenID, data.m_visitBuilding, TransferManager.TransferReason.Dead))
                            {
                                break;
                            }
                            return;
                        }
                       ReleaseCitizen(citizenID);
                        return;

                    case Citizen.Location.Moving:
                        if (!data.Dead)
                        {
                            if ((data.m_vehicle == 0) && (data.m_instance == 0))
                            {
                                if (data.m_visitBuilding != 0)
                                {
                                    data.SetVisitplace(citizenID, 0, 0);
                                }
                                data.CurrentLocation = Citizen.Location.Home;
                            }
                            break;
                        }
                        if (data.m_vehicle != 0)
                        {
                            if (data.m_homeBuilding != 0)
                            {
                                data.SetHome(citizenID, 0, 0);
                            }
                            if (data.m_workBuilding != 0)
                            {
                                data.SetWorkplace(citizenID, 0, 0);
                            }
                            if (data.m_visitBuilding != 0)
                            {
                                data.SetVisitplace(citizenID, 0, 0);
                            }
                            break;
                        }
                       ReleaseCitizen(citizenID);
                        return;
                }
                data.m_flags &= ~Citizen.Flags.NeedGoods;
            }
        }

        public override void StartTransfer(uint citizenID, ref Citizen data, TransferManager.TransferReason reason, TransferManager.TransferOffer offer)
        {
            if (data.m_flags == Citizen.Flags.None || (data.Dead && reason != TransferManager.TransferReason.Dead))
            {
                return;
            }
            switch (reason)
            {
                case TransferManager.TransferReason.Sick:
                    if (data.Sick && base.StartMoving(citizenID, ref data, 0, offer.Building))
                    {
                        data.SetVisitplace(citizenID, offer.Building, 0u);
                    }
                    return;
                case TransferManager.TransferReason.Dead:
                    if (data.Dead)
                    {
                        data.SetVisitplace(citizenID, offer.Building, 0u);
                        if (data.m_visitBuilding != 0)
                        {
                            data.CurrentLocation = Citizen.Location.Visit;
                        }
                    }
                    return;
                case TransferManager.TransferReason.Worker0:
                case TransferManager.TransferReason.Worker1:
                case TransferManager.TransferReason.Worker2:
                case TransferManager.TransferReason.Worker3:
                    if (data.m_workBuilding == 0)
                    {
                        data.SetWorkplace(citizenID, offer.Building, 0u);
                    }
                    return;
                case TransferManager.TransferReason.Student1:
                case TransferManager.TransferReason.Student2:
                case TransferManager.TransferReason.Student3:
                    if (data.m_workBuilding == 0)
                    {
                        data.SetStudentplace(citizenID, offer.Building, 0u);
                    }
                    return;
                case TransferManager.TransferReason.Family0:
                case TransferManager.TransferReason.Family1:
                case TransferManager.TransferReason.Family2:
                case TransferManager.TransferReason.Family3:
                    if (data.m_homeBuilding != 0 && offer.Building != 0)
                    {
                        uint num = Singleton<BuildingManager>.instance.m_buildings.m_buffer[(int)data.m_homeBuilding].FindCitizenUnit(CitizenUnit.Flags.Home, citizenID);
                        if (num != 0u)
                        {
                            this.MoveFamily(num, ref Singleton<CitizenManager>.instance.m_units.m_buffer[(int)((UIntPtr)num)], offer.Building);
                        }
                    }
                    return;
                case TransferManager.TransferReason.Single0:
                case TransferManager.TransferReason.Single1:
                case TransferManager.TransferReason.Single2:
                case TransferManager.TransferReason.Single3:
                case TransferManager.TransferReason.Single0B:
                case TransferManager.TransferReason.Single1B:
                case TransferManager.TransferReason.Single2B:
                case TransferManager.TransferReason.Single3B:
                    data.SetHome(citizenID, offer.Building, 0u);
                    if (data.m_homeBuilding == 0)
                    {
                       ReleaseCitizen(citizenID);
                    }
                    return;
                case TransferManager.TransferReason.PartnerYoung:
                case TransferManager.TransferReason.PartnerAdult:
                    {
                        uint citizen = offer.Citizen;
                        if (citizen != 0u)
                        {
                            CitizenManager instance = Singleton<CitizenManager>.instance;
                            BuildingManager instance2 = Singleton<BuildingManager>.instance;
                            ushort homeBuilding = instance.m_citizens.m_buffer[(int)((UIntPtr)citizen)].m_homeBuilding;
                            if (homeBuilding != 0 && !instance.m_citizens.m_buffer[(int)((UIntPtr)citizen)].Dead)
                            {
                                uint num2 = instance2.m_buildings.m_buffer[(int)homeBuilding].FindCitizenUnit(CitizenUnit.Flags.Home, citizen);
                                if (num2 != 0u)
                                {
                                    data.SetHome(citizenID, 0, num2);
                                    data.m_family = instance.m_citizens.m_buffer[(int)((UIntPtr)citizen)].m_family;
                                }
                            }
                        }
                        return;
                    }
                case TransferManager.TransferReason.Shopping:
                case TransferManager.TransferReason.ShoppingB:
                case TransferManager.TransferReason.ShoppingC:
                case TransferManager.TransferReason.ShoppingD:
                case TransferManager.TransferReason.ShoppingE:
                case TransferManager.TransferReason.ShoppingF:
                case TransferManager.TransferReason.ShoppingG:
                case TransferManager.TransferReason.ShoppingH:
                    if (data.m_homeBuilding != 0 && !data.Sick && base.StartMoving(citizenID, ref data, 0, offer.Building))
                    {
                        StartJourney(citizenID, data);
                        data.SetVisitplace(citizenID, offer.Building, 0u);
                        CitizenManager instance3 = Singleton<CitizenManager>.instance;
                        BuildingManager instance4 = Singleton<BuildingManager>.instance;
                        uint containingUnit = data.GetContainingUnit(citizenID, instance4.m_buildings.m_buffer[(int)data.m_homeBuilding].m_citizenUnits, CitizenUnit.Flags.Home);
                        if (containingUnit != 0u)
                        {
                            CitizenUnit[] expr_231_cp_0 = instance3.m_units.m_buffer;
                            UIntPtr expr_231_cp_1 = (UIntPtr)containingUnit;
                            expr_231_cp_0[(int)expr_231_cp_1].m_goods = (ushort)(expr_231_cp_0[(int)expr_231_cp_1].m_goods + 100);
                        }
                    }
                    return;
                case TransferManager.TransferReason.Entertainment:
                case TransferManager.TransferReason.EntertainmentB:
                case TransferManager.TransferReason.EntertainmentC:
                case TransferManager.TransferReason.EntertainmentD:
                    if (data.m_homeBuilding != 0 && !data.Sick && base.StartMoving(citizenID, ref data, 0, offer.Building))
                    {
                        data.SetVisitplace(citizenID, offer.Building, 0u);
                    }
                    return;
            }
        }

        private void MoveFamily(uint homeID, ref CitizenUnit data, ushort targetBuilding)
        {
            BuildingManager instance = Singleton<BuildingManager>.instance;
            CitizenManager instance2 = Singleton<CitizenManager>.instance;
            uint unitID = 0u;
            if (targetBuilding != 0)
            {
                unitID = instance.m_buildings.m_buffer[(int)targetBuilding].GetEmptyCitizenUnit(CitizenUnit.Flags.Home);
            }
            for (int i = 0; i < 5; i++)
            {
                uint citizen = data.GetCitizen(i);
                if (citizen != 0u && !instance2.m_citizens.m_buffer[(int)((UIntPtr)citizen)].Dead)
                {
                    instance2.m_citizens.m_buffer[(int)((UIntPtr)citizen)].SetHome(citizen, 0, unitID);
                    if (instance2.m_citizens.m_buffer[(int)((UIntPtr)citizen)].m_homeBuilding == 0)
                    {
                        instance2.ReleaseCitizen(citizen);
                    }
                }
            }
        }

        private void Die(uint citizenID, ref Citizen data)
        {
            data.Sick = false;
            data.Dead = true;
            data.SetParkedVehicle(citizenID, 0);
            ushort buildingByLocation = data.GetBuildingByLocation();
            if (buildingByLocation == 0)
            {
                buildingByLocation = data.m_homeBuilding;
            }
            if (buildingByLocation != 0)
            {
                DistrictManager instance = Singleton<DistrictManager>.instance;
                Vector3 position = Singleton<BuildingManager>.instance.m_buildings.m_buffer[buildingByLocation].m_position;
                byte district = instance.GetDistrict(position);
                instance.m_districts.m_buffer[district].m_deathData.m_tempCount++;
            }
        }

        private TransferManager.TransferReason GetEntertainmentReason()
        {
            switch (Singleton<SimulationManager>.instance.m_randomizer.Int32(4))
            {
                case 0:
                    return TransferManager.TransferReason.Entertainment;

                case 1:
                    return TransferManager.TransferReason.EntertainmentB;

                case 2:
                    return TransferManager.TransferReason.EntertainmentC;

                case 3:
                    return TransferManager.TransferReason.EntertainmentD;
            }
            return TransferManager.TransferReason.Entertainment;
        }

        private TransferManager.TransferReason GetShoppingReason()
        {
            switch (Singleton<SimulationManager>.instance.m_randomizer.Int32(8))
            {
                case 0:
                    return TransferManager.TransferReason.Shopping;

                case 1:
                    return TransferManager.TransferReason.ShoppingB;

                case 2:
                    return TransferManager.TransferReason.ShoppingC;

                case 3:
                    return TransferManager.TransferReason.ShoppingD;

                case 4:
                    return TransferManager.TransferReason.ShoppingE;

                case 5:
                    return TransferManager.TransferReason.ShoppingF;

                case 6:
                    return TransferManager.TransferReason.ShoppingG;

                case 7:
                    return TransferManager.TransferReason.ShoppingH;
            }
            return TransferManager.TransferReason.Shopping;
        }


        private void UpdateWellbeing(uint citizenID, ref Citizen data)
        {
            if (data.m_homeBuilding != 0)
            {
                int num23;
                int num24;
                bool flag;
                int num = 0;
                BuildingManager instance = Singleton<BuildingManager>.instance;
                BuildingInfo info = instance.m_buildings.m_buffer[data.m_homeBuilding].Info;
                Vector3 position = instance.m_buildings.m_buffer[data.m_homeBuilding].m_position;
                ItemClass itemClass = info.m_class;
                DistrictManager manager2 = Singleton<DistrictManager>.instance;
                byte district = manager2.GetDistrict(position);
                DistrictPolicies.Services servicePolicies = manager2.m_districts.m_buffer[district].m_servicePolicies;
                DistrictPolicies.Taxation taxationPolicies = manager2.m_districts.m_buffer[district].m_taxationPolicies;
                DistrictPolicies.Special specialPolicies = manager2.m_districts.m_buffer[district].m_specialPolicies;
                int health = data.m_health;
                if (health > 80)
                {
                    num += 5;
                }
                else if (health > 60)
                {
                    num += 5;
                }
                num -= Mathf.Clamp(50 - health, 0, 30);
                if ((servicePolicies & DistrictPolicies.Services.PetBan) != DistrictPolicies.Services.None)
                {
                    num -= 5;
                }
                if ((servicePolicies & DistrictPolicies.Services.SmokingBan) != DistrictPolicies.Services.None)
                {
                    num -= 15;
                }
                if (instance.m_buildings.m_buffer[data.m_homeBuilding].GetLastFrameData().m_fireDamage != 0)
                {
                    num -= 15;
                }
                Citizen.Wealth wealthLevel = data.WealthLevel;
                Citizen.AgePhase agePhase = Citizen.GetAgePhase(data.EducationLevel, data.Age);
                int taxRate = Singleton<EconomyManager>.instance.GetTaxRate(itemClass, taxationPolicies) + 5;
                int num5 = 8 - (int)wealthLevel;
                int num6 = 11 - (int)wealthLevel;
                if (itemClass.m_subService == ItemClass.SubService.ResidentialHigh)
                {
                    num5++;
                    num6++;
                }
                if (taxRate < num5)
                {
                    num += num5 - taxRate;
                }
                if (taxRate > num6)
                {
                    num -= taxRate - num6;
                }
                int policeDepartmentRequirement = Citizen.GetPoliceDepartmentRequirement(agePhase);
                if (policeDepartmentRequirement != 0)
                {
                    int num8;
                    int num9;
                    Singleton<ImmaterialResourceManager>.instance.CheckResource(ImmaterialResourceManager.Resource.PoliceDepartment, position, out num8, out num9);
                    if (num8 != 0)
                    {
                        num += ImmaterialResourceManager.CalculateResourceEffect(num8, policeDepartmentRequirement, 500, 20, 40);
                    }
                    if (num9 != 0)
                    {
                        num += ImmaterialResourceManager.CalculateResourceEffect(num9, policeDepartmentRequirement >> 1, 250, 5, 20);
                    }
                }
                int fireDepartmentRequirement = Citizen.GetFireDepartmentRequirement(agePhase);
                if (fireDepartmentRequirement != 0)
                {
                    int num11;
                    int num12;
                    Singleton<ImmaterialResourceManager>.instance.CheckResource(ImmaterialResourceManager.Resource.FireDepartment, position, out num11, out num12);
                    if (num11 != 0)
                    {
                        num += ImmaterialResourceManager.CalculateResourceEffect(num11, fireDepartmentRequirement, 500, 20, 40);
                    }
                    if (num12 != 0)
                    {
                        num += ImmaterialResourceManager.CalculateResourceEffect(num12, fireDepartmentRequirement >> 1, 250, 5, 20);
                    }
                }
                int educationRequirement = Citizen.GetEducationRequirement(agePhase);
                if (educationRequirement != 0)
                {
                    int num14;
                    int num15;
                    if (agePhase < Citizen.AgePhase.Teen0)
                    {
                        Singleton<ImmaterialResourceManager>.instance.CheckResource(ImmaterialResourceManager.Resource.EducationElementary, position, out num14, out num15);
                        if (((num14 > 0x3e8) && !data.Education1) && (Singleton<SimulationManager>.instance.m_randomizer.Int32(0x2328) < (num14 - 0x3e8)))
                        {
                            data.Education1 = true;
                        }
                    }
                    else if (agePhase < Citizen.AgePhase.Young0)
                    {
                        Singleton<ImmaterialResourceManager>.instance.CheckResource(ImmaterialResourceManager.Resource.EducationHighSchool, position, out num14, out num15);
                        if (((num14 > 0x3e8) && !data.Education2) && (Singleton<SimulationManager>.instance.m_randomizer.Int32(0x2328) < (num14 - 0x3e8)))
                        {
                            data.Education2 = true;
                        }
                    }
                    else
                    {
                        Singleton<ImmaterialResourceManager>.instance.CheckResource(ImmaterialResourceManager.Resource.EducationUniversity, position, out num14, out num15);
                        if (((num14 > 0x3e8) && !data.Education3) && (Singleton<SimulationManager>.instance.m_randomizer.Int32(0x2328) < (num14 - 0x3e8)))
                        {
                            data.Education3 = true;
                        }
                    }
                    if (num14 != 0)
                    {
                        num += ImmaterialResourceManager.CalculateResourceEffect(num14, educationRequirement, 500, 20, 40);
                    }
                    if (num15 != 0)
                    {
                        num += ImmaterialResourceManager.CalculateResourceEffect(num15, educationRequirement >> 1, 250, 5, 20);
                    }
                }
                int entertainmentRequirement = Citizen.GetEntertainmentRequirement(agePhase);
                if (entertainmentRequirement != 0)
                {
                    int num17;
                    int num18;
                    Singleton<ImmaterialResourceManager>.instance.CheckResource(ImmaterialResourceManager.Resource.Entertainment, position, out num17, out num18);
                    if (num17 != 0)
                    {
                        num += ImmaterialResourceManager.CalculateResourceEffect(num17, entertainmentRequirement, 500, 30, 60);
                    }
                    if (num18 != 0)
                    {
                        num += ImmaterialResourceManager.CalculateResourceEffect(num18, entertainmentRequirement >> 1, 250, 10, 40);
                    }
                }
                int transportRequirement = Citizen.GetTransportRequirement(agePhase);
                if (transportRequirement != 0)
                {
                    int num20;
                    int num21;
                    Singleton<ImmaterialResourceManager>.instance.CheckResource(ImmaterialResourceManager.Resource.PublicTransport, position, out num20, out num21);
                    if (num20 != 0)
                    {
                        num += ImmaterialResourceManager.CalculateResourceEffect(num20, transportRequirement, 500, 20, 40);
                    }
                    if (num21 != 0)
                    {
                        num += ImmaterialResourceManager.CalculateResourceEffect(num21, transportRequirement >> 1, 250, 5, 20);
                    }
                }
                int deathCareRequirement = Citizen.GetDeathCareRequirement(agePhase);
                Singleton<ImmaterialResourceManager>.instance.CheckResource(ImmaterialResourceManager.Resource.DeathCare, position, out num23, out num24);
                if (deathCareRequirement != 0)
                {
                    if (num23 != 0)
                    {
                        num += ImmaterialResourceManager.CalculateResourceEffect(num23, deathCareRequirement, 500, 10, 20);
                    }
                    if (num24 != 0)
                    {
                        num += ImmaterialResourceManager.CalculateResourceEffect(num24, deathCareRequirement >> 1, 250, 3, 10);
                    }
                }
                Singleton<ElectricityManager>.instance.CheckElectricity(position, out flag);
                if (flag)
                {
                    num += 12;
                    data.NoElectricity = 0;
                }
                else
                {
                    int noElectricity = data.NoElectricity;
                    if (noElectricity < 2)
                    {
                        data.NoElectricity = noElectricity + 1;
                    }
                    else
                    {
                        num -= 5;
                    }
                }

                //kh addition for snowfall
                bool flag2;
                Singleton<WaterManager>.instance.CheckHeating(position, out flag2);
                if (flag2)
                {
                    num += 5;
                }
                else if ((servicePolicies & DistrictPolicies.Services.NoElectricity) != DistrictPolicies.Services.None)
                {
                    num -= 10;
                }


                int workRequirement = Citizen.GetWorkRequirement(agePhase);
                if (workRequirement != 0)
                {
                    if (data.m_workBuilding == 0)
                    {
                        int unemployed = data.Unemployed;
                        num -= (unemployed * workRequirement) / 50;
                        if (Singleton<UnlockManager>.instance.Unlocked(ItemClass.Service.PoliceDepartment))
                        {
                            data.Unemployed = unemployed + 1;
                        }
                        else
                        {
                            data.Unemployed = Mathf.Min(1, unemployed + 1);
                        }
                    }
                    else
                    {
                        data.Unemployed = 0;
                    }
                }
                else
                {
                    data.Unemployed = 0;
                }
                num -= commuteHappinness[citizenID] / 2;
                num = Mathf.Clamp(num, 0, 100);
                data.m_wellbeing = (byte)num;
            }
        }

        private void UpdateWorkplace(uint citizenID, ref Citizen data)
        {
            if ((data.m_workBuilding == 0) && (data.m_homeBuilding != 0))
            {
                Vector3 position = Singleton<BuildingManager>.instance.m_buildings.m_buffer[data.m_homeBuilding].m_position;
                DistrictManager instance = Singleton<DistrictManager>.instance;
                byte district = instance.GetDistrict(position);
                DistrictPolicies.Services servicePolicies = instance.m_districts.m_buffer[district].m_servicePolicies;
                int age = data.Age;
                TransferManager.TransferReason none = TransferManager.TransferReason.None;
                switch (Citizen.GetAgeGroup(age))
                {
                    case Citizen.AgeGroup.Child:
                        if (!data.Education1)
                        {
                            none = TransferManager.TransferReason.Student1;
                        }
                        break;

                    case Citizen.AgeGroup.Teen:
                        if (!data.Education2)
                        {
                            none = TransferManager.TransferReason.Student2;
                        }
                        break;

                    case Citizen.AgeGroup.Young:
                    case Citizen.AgeGroup.Adult:
                        if (!data.Education3)
                        {
                            none = TransferManager.TransferReason.Student3;
                        }
                        break;
                }
                if (((data.Unemployed != 0) && (data.m_homeBuilding != 0)) && ((((servicePolicies & DistrictPolicies.Services.EducationBoost) == DistrictPolicies.Services.None) || (none != TransferManager.TransferReason.Student3)) || ((age % 5) > 2)))
                {
                    TransferManager.TransferOffer offer = new TransferManager.TransferOffer
                    {
                        Priority = Singleton<SimulationManager>.instance.m_randomizer.Int32(8),
                        Citizen = citizenID,
                        Position = position,
                        Amount = 1,
                        Active = true
                    };
                    switch (data.EducationLevel)
                    {
                        case Citizen.Education.Uneducated:
                            Singleton<TransferManager>.instance.AddOutgoingOffer(TransferManager.TransferReason.Worker0, offer);
                            break;

                        case Citizen.Education.OneSchool:
                            Singleton<TransferManager>.instance.AddOutgoingOffer(TransferManager.TransferReason.Worker1, offer);
                            break;

                        case Citizen.Education.TwoSchools:
                            Singleton<TransferManager>.instance.AddOutgoingOffer(TransferManager.TransferReason.Worker2, offer);
                            break;

                        case Citizen.Education.ThreeSchools:
                            Singleton<TransferManager>.instance.AddOutgoingOffer(TransferManager.TransferReason.Worker3, offer);
                            break;
                    }
                }
                if (none != TransferManager.TransferReason.None && (none != TransferManager.TransferReason.Student3 || (servicePolicies & DistrictPolicies.Services.SchoolsOut) == DistrictPolicies.Services.None || age % 5 > 1))
                {
                    TransferManager.TransferOffer offer2 = new TransferManager.TransferOffer
                    {
                        Priority = Singleton<SimulationManager>.instance.m_randomizer.Int32(8),
                        Citizen = citizenID,
                        Position = position,
                        Amount = 1,
                        Active = true
                    };
                    Singleton<TransferManager>.instance.AddOutgoingOffer(none, offer2);
                }
            }
        }

        protected override bool StartPathFind(ushort instanceID, ref CitizenInstance citizenData)
        {
            if (citizenData.m_citizen != 0u)
            {
                CitizenManager instance = Singleton<CitizenManager>.instance;
                VehicleManager instance2 = Singleton<VehicleManager>.instance;
                ushort vehicle = instance.m_citizens.m_buffer[(int)((UIntPtr)citizenData.m_citizen)].m_vehicle;
                if (vehicle != 0)
                {
                    VehicleInfo info = instance2.m_vehicles.m_buffer[(int)vehicle].Info;
                    if (info != null)
                    {
                        uint citizen = info.m_vehicleAI.GetOwnerID(vehicle, ref instance2.m_vehicles.m_buffer[(int)vehicle]).Citizen;
                        if (citizen == citizenData.m_citizen)
                        {
                            info.m_vehicleAI.SetTarget(vehicle, ref instance2.m_vehicles.m_buffer[(int)vehicle], 0);
                            return false;
                        }
                        else
                        {
                            instance.m_citizens.m_buffer[(int)((UIntPtr)citizenData.m_citizen)].SetVehicle(citizenData.m_citizen, 0, 0u);
                        }
                    }
                    instance.m_citizens.m_buffer[(int)((UIntPtr)citizenData.m_citizen)].SetVehicle(citizenData.m_citizen, 0, 0u);
                    return false;
                }
            }
            if (citizenData.m_targetBuilding != 0)
            {
                VehicleInfo vehicleInfo = base.GetVehicleInfo(instanceID, ref citizenData, false);
                BuildingManager instance3 = Singleton<BuildingManager>.instance;
                BuildingInfo info2 = instance3.m_buildings.m_buffer[(int)citizenData.m_targetBuilding].Info;
                Randomizer randomizer = new Randomizer((int)instanceID << 8 | (int)citizenData.m_targetSeed);
                Vector3 vector;
                Vector3 endPos;
                Vector2 vector2;
                CitizenInstance.Flags flags;
                info2.m_buildingAI.CalculateUnspawnPosition(citizenData.m_targetBuilding, ref instance3.m_buildings.m_buffer[(int)citizenData.m_targetBuilding], ref randomizer, this.m_info, instanceID, out vector, out endPos, out vector2, out flags);
                if (!base.StartPathFind(instanceID, ref citizenData, citizenData.m_targetPos, endPos, vehicleInfo))
                {
                    if (vehicleInfo == null)
                    {
                        vehicleInfo = base.GetVehicleInfo(instanceID, ref citizenData, true);
                        var result = base.StartPathFind(instanceID, ref citizenData, citizenData.m_targetPos, endPos, vehicleInfo);
                        return result;
                    }
                    else
                    {
                        return false;
                    }                    
                }
                else
                {
                    return true;
                }
            }
            return false;
        }


    }

}